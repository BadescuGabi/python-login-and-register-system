"""
system helper functions
=======================

This module is pure python and has no external dependencies.

For to determine the value of an OS environment variable
with automatic variable name conversion you can use the
function :func:`env_str`.

Other helper functions provided by this namespace portion for to
determine the values of the most important system environment
variables for your application are :func:`sys_env_dict`
and :func:`sys_env_text`.

The helper function :func:`sys_platform` are extending Python's
:func:`os.name` and :func:`sys.platform` functions for the
operating systems iOS and Android (not supported by Python).

Generic ISO format strings for `date` and `datetime` values
are provided by the constants :data:`DATE_ISO` and
:data:`DATE_TIME_ISO`.
"""
import os
import sys
from typing import Any, Dict, Optional


__version__ = '0.1.1'


DATE_ISO: str = '%Y-%m-%d'                      #: ISO string format for date values (e.g. in config files/variables)
DATE_TIME_ISO: str = '%Y-%m-%d %H:%M:%S.%f'     #: ISO string format for datetime values


def app_name_guess() -> str:
    """ guess/try to determine the name of the currently running app (w/o assessing not yet initialized app instance).

    :return:        application name/id.
    """
    path = sys.argv[0]
    app_name = os.path.splitext(os.path.basename(path))[0]
    if app_name.lower() in ('main', '__main__', '_jb_pytest_runner'):
        path = os.getcwd()
        app_name = os.path.basename(path)
    return app_name


def env_str(name: str, convert_name: bool = False) -> Optional[str]:
    """ determine the string value of an OS environment variable, optionally preventing invalid variable name.

    :param name:            name of a OS environment variable.
    :param convert_name:    pass True for to prevent invalid variable names by converting
                            CamelCase names into SNAKE_CASE, lower-case into
                            upper-case and all non-alpha-numeric characters into underscore characters.
    :return:                string value of OS environment variable if found, else None.
    """
    if convert_name:
        str_parts = list()
        for char in name:
            if char.isupper():
                str_parts.append('_' + char)
            elif char.isalnum():
                str_parts.append(char.upper())
            else:
                str_parts.append('_')
        name = ''.join(str_parts)

    return os.environ.get(name)


def sys_env_dict(file: str = __file__) -> Dict[str, Any]:
    """ returns dict with python system run-time environment values.

    :param file:    optional file name (def=__file__/system.py).
    :return:        python system run-time environment values like python_ver, argv, cwd, executable, __file__, frozen
                    and bundle_dir.
    """
    sed: Dict[str, Any] = dict()
    sed['python_ver'] = sys.version
    sed['argv'] = sys.argv
    sed['executable'] = sys.executable
    sed['cwd'] = os.getcwd()
    sed['__file__'] = file
    sed['frozen'] = getattr(sys, 'frozen', False)
    if getattr(sys, 'frozen', False):
        sed['bundle_dir'] = getattr(sys, '_MEIPASS', '*#ERR#*')
    return sed


def sys_env_text(file: str = __file__, ind_ch: str = " ", ind_len: int = 18, key_ch: str = "=", key_len: int = 12,
                 extra_sys_env_dict: Optional[Dict[str, str]] = None) -> str:
    """ compile formatted text block with system environment info.

    :param file:                main module file name (def=__file__/system.py).
    :param ind_ch:              indent character (def=" ").
    :param ind_len:             indent depths (def=18 characters).
    :param key_ch:              key-value separator character (def=" =").
    :param key_len:             key-name maximum length (def=12 characters).
    :param extra_sys_env_dict:  dict with additional system info items.
    :return:                    text block with system environment info.
    """
    sed = sys_env_dict(file=file)
    if extra_sys_env_dict:
        sed.update(extra_sys_env_dict)
    ind = ""
    text = "\n".join([f"{ind:{ind_ch}>{ind_len}}{key:{key_ch}<{key_len}}{val}" for key, val in sed.items()])
    return text


def sys_platform() -> str:
    """ determine the operating system where this code is running.

    :return:    operating system (extension) as string:

                * `'android'` for all Android systems.
                * `'cygwin'` for MS Windows with an installed Cygwin extension.
                * `'darwin'` for all Apple Mac OS X systems.
                * `'freebsd'` for all other BSD-based unix systems.
                * `'ios'` for all Apple iOS systems.
                * `'linux'` for all other unix systems (like Arch, Debian/Ubuntu, Suse, ...).
                * `'win32'` for MS Windows systems (w/o the Cygwin extension).

    """
    if env_str('ANDROID_ARGUMENT') is not None:  # p4a env variable; alternatively use ANDROID_PRIVATE
        platform = 'android'
    else:
        platform = env_str('KIVY_BUILD') or sys.platform    # KIVY_BUILD == 'android'/'ios' on Android/iOS
    return platform
